/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author galaxy
 */
import java.awt.*;
import javax.swing.*;

import org.jfree.chart.*;
import org.jfree.data.category.*;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.*;
import org.jfree.data.*;
import org.jfree.chart.renderer.category.*;
import org.jfree.chart.plot.*;

import java.sql.*;

import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
//import org.jfree.chart.plot.CategoryPlot;
// import org.jfree.chart.plot.CombinedDomainCategoryPlot;

import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
public class AnalysisFrame extends javax.swing.JFrame {

   Connection con;
   Statement st;
   ResultSet rs;
   
   DefaultCategoryDataset datasetSerial,datasetP ;
    /**
     * Creates new form AnalysisFrame
     */
    public AnalysisFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 150));
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jButton1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton1.setText("Tweet Analysis - Serial");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(100, 60, 190, 25);

        jButton2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton2.setText("Tweet Analysis - Parallel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(100, 110, 190, 25);

        jButton3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton3.setText("View Graph");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(100, 160, 190, 25);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(20, 20, 360, 260);

        setBounds(350, 250, 408, 327);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //------->Call serial version of analyzer 
        try
        {
        SentimentAnalysisWithCountSerial.main(null);
        }
        catch(Exception e)
        {
            System.out.println(e) ;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Run analyzer - Parallel 
         try
        {
        SentimentAnalysisParallel.main(null);
        }
        catch(Exception e)
        {
            System.out.println(e) ;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         try {
            Class.forName("org.gjt.mm.mysql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/NaiveSentimentDB", "root", "");
            st = con.createStatement();
            rs = st.executeQuery("select count(*) from analysis  where OptimizationType='Serial'");
            rs.next();
            int total = rs.getInt(1);
            int noOfTweets [] =null ;
            int runTime[] = null ;
            
            if(total > 0)
            {
                         noOfTweets =  new int[total] ;
                         runTime = new int[total];
            }
            else 
                 total = 0;
          int i =0;
          
           rs = st.executeQuery("select NoOfTweets,RunningTime from  analysis  where OptimizationType='Serial' order by NoOfTweets asc");
           
          while(rs.next())
          {
               noOfTweets[i] = rs.getInt(1);
               runTime[i] =rs.getInt(2); 
               i++;
 
           }

           datasetSerial = new DefaultCategoryDataset();

      for(int j=0;j<noOfTweets.length;j++)
      {
          //   dataset.setValue(noOfTweets[j], "Running Time Analysis", runTime[j]+"");
            datasetSerial.setValue(runTime[j], "Serial",noOfTweets[j]+"");
      }
        

     rs = st.executeQuery("select count(*) from analysis  where OptimizationType='Parallel'");
            rs.next();
      
      int total1 = rs.getInt(1);
            int noOfTweets1 [] =null ;
            int runTime1[] = null ;
            
            if(total1 > 0)
            {
                         noOfTweets1 =  new int[total1] ;
                         runTime1 = new int[total1];
            }
            else 
                 total1 = 0;
           i =0;
          
           rs = st.executeQuery("select NoOfTweets,RunningTime from  analysis  where OptimizationType='Parallel' order by NoOfTweets asc");
           
          while(rs.next())
          {
               noOfTweets1[i] = rs.getInt(1);
               runTime1[i] =rs.getInt(2); 
               i++;
 
           }

           datasetP = new DefaultCategoryDataset();

      for(int j=0;j<noOfTweets1.length;j++)
      {
          //   dataset.setValue(noOfTweets[j], "Running Time Analysis", runTime[j]+"");
            datasetP.setValue(runTime1[j], "Parallel",noOfTweets1[j]+"");
      }
        
        JFreeChart chart = createChart();
        
      // JFreeChart chart = ChartFactory.createBarChart("No.of Tweets Vs Running Time","No.of Tweets", "Running Time ( in ms )", dataset, PlotOrientation.VERTICAL, true,true, false) ;
        chart.setBackgroundPaint(Color.white);
        chart.getTitle().setPaint(Color.red);
        
        /*CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.red);
        p.setBackgroundPaint(Color.white);*/
       ChartFrame frame1=new ChartFrame("Bar Chart",chart);
       frame1.setVisible(true);
	frame1.setBounds(205,200,692,450);
        frame1.setResizable(false);
        
                }
       catch (Exception e) {
            JOptionPane.showMessageDialog(new JFrame(), "Graph : "+e);
                }        
    }//GEN-LAST:event_jButton3ActionPerformed

    private JFreeChart createChart() {

  final CategoryDataset dataset1 = datasetSerial ;
  final NumberAxis rangeAxis1 =   new NumberAxis("Running Time");
  rangeAxis1.setStandardTickUnits(   NumberAxis.createIntegerTickUnits());
  final BarRenderer renderer1 = new BarRenderer();
  renderer1.setBaseToolTipGenerator(   new StandardCategoryToolTipGenerator());
  final CategoryPlot subplot1 =    new CategoryPlot(dataset1, null, rangeAxis1,   renderer1);
  subplot1.setDomainGridlinesVisible(true);


  final CategoryDataset dataset2 = datasetP ;
  final NumberAxis rangeAxis2 =    new NumberAxis("Running Time");
  rangeAxis2.setStandardTickUnits(   NumberAxis.createIntegerTickUnits());
  final BarRenderer renderer2 =  new BarRenderer();
  renderer2.setBaseToolTipGenerator(  new StandardCategoryToolTipGenerator());
  final CategoryPlot subplot2 =   new CategoryPlot(dataset2, null, rangeAxis2,   renderer2);
  subplot2.setDomainGridlinesVisible(true);



  final CategoryAxis domainAxis = new CategoryAxis("No.Of Tweets");
  final CombinedDomainCategoryPlot plot = new CombinedDomainCategoryPlot(domainAxis);

  plot.add(subplot1, 1);
  plot.add(subplot2, 1);

  final JFreeChart chart = new JFreeChart("Sentiment Analysis - Serial Vs Parallel",
  new Font("SansSerif", Font.BOLD, 12),
  plot,
  true);
  return chart;
  }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalysisFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
